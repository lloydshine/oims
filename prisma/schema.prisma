// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  ASSISTANT
}

enum Status {
  Approved
  Pending
  Declined
  Completed
}

enum Office {
  OSAS
  GUIDANCE
}

model Department {
  id        String    @id @default(uuid())
  name      String    @unique
  shortName String    @unique
  Borrow    Borrow[]
  Program   Program[]
  Student   Student[]
}

model Program {
  id           String     @id @default(uuid())
  name         String     @unique
  shortName    String     @unique
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  Student      Student[]
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  role           UserRole
  assignedOffice Office
  firstName      String
  middleName     String
  lastName       String
  contactNumber  String
  email          String
  sessions       Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Equipment {
  id              String            @id @default(uuid())
  name            String
  brand           String
  price           Int
  quantity        Int
  isAvailable     Boolean           @default(false)
  imageUrl        String?
  BorrowEquipment BorrowEquipment[] // No `onDelete` here
  dateAdded       DateTime          @default(now())
}

model Borrow {
  id               String            @id @default(uuid())
  borrower         String
  department       Department        @relation(fields: [departmentId], references: [id])
  event            String
  dateRequested    DateTime          @default(now())
  dateReturned     DateTime?
  dateToBeReturned DateTime?
  dateClaimed      DateTime?
  status           Status            @default(Pending)
  BorrowEquipment  BorrowEquipment[]
  departmentId     String
}

model BorrowEquipment {
  id          String    @id @default(uuid())
  borrowId    String
  equipmentId String
  returned    Boolean   @default(false)
  quantity    Int // Number of equipment items borrowed
  borrow      Borrow    @relation(fields: [borrowId], references: [id])
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade) // `onDelete` here

  @@unique([borrowId, equipmentId]) // Ensure a specific equipment is not duplicated in the same borrow
}

model Student {
  id             String      @id @default(uuid())
  studentId      String      @unique
  firstName      String
  middleName     String
  lastName       String
  contactNumber  String
  email          String
  department     Department  @relation(fields: [departmentId], references: [id])
  departmentId   String
  program        Program     @relation(fields: [programId], references: [id])
  programId      String
  yearLevel      Int
  classification String
  Admission      Admission[]
}

model Admission {
  id            String          @id @default(uuid())
  student       Student         @relation(fields: [studentId], references: [id])
  studentId     String
  dateAdmitted  DateTime        @default(now())
  status        Status          @default(Pending)
  dateApproved  DateTime?
  AdmissionFile AdmissionFile[]
}

model AdmissionFile {
  id          String    @id @default(uuid())
  imageURL    String
  admission   Admission @relation(fields: [admissionId], references: [id])
  admissionId String
}
